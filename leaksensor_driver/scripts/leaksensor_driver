#!/usr/bin/env python

from __future__ import division

import struct
import time

import roslib
roslib.load_manifest('leaksensor_driver')
import rospy
from std_msgs.msg import Header

from leaksensor_driver.msg import Report
from leaksensor_driver import xbee, bmp085


rospy.init_node('leaksensor_driver')
report_publishers = {}
addresses = rospy.get_param('~addresses', {})



last = time.time()


def got_packet(source, rssi, data):
    global last
    
    if len(data) != 31:
        print 'invalid length', len(data)
        return
    
    print 'received packet from', source, 'with rssi', rssi
    magic, UT, UP_, flags = struct.unpack('>HHIB', data[:9])
    if magic != 0x74bf:
        print 'invalid magic'
        return
    
    temperature, pressure = bmp085.decode(UT, UP_, data[9:])
    
    water = bool(flags & 1)
    
    name = addresses.get(source, 'unknown_' + source)
    if name not in report_publishers:
        report_publishers[name] = rospy.Publisher('~' + name, Report)
    report_publishers[name].publish(Report(
        header=Header(
            stamp=rospy.Time.now(),
        ),
        temperature=temperature,
        pressure=pressure,
        water=water,
    ))
    
    print 'temp: %s pres: %s water: %s' % (temperature, pressure, water)
    if water:
        rospy.logerr('water detected at %s leaksensor!' % (name,))
    now = time.time()
    print 'time since last: %s' % (now - last)
    last = now
    print

xbee = xbee.XBee(rospy.get_param('~port'))
while True:
    cmdID, cmdData = xbee.read()
    
    if cmdID == 0x01: # is a transmit request mirrored from local xbee
        got_packet(None, None, data[4:])
    elif cmdID == 0x81: # 16-bit address 
        (source, rssi, options), rf_data = struct.unpack('>HBB', cmdData[:4]), cmdData[4:]
        source = '%04x' % source
        got_packet(source, rssi, rf_data)
    elif cmdID == 0x90: # 64-bit address
        # apparently the documentation is wrong - there's no frame_id here
        (source, reserved, option), rf_data = struct.unpack('>QHB', cmdData[:11]), cmdData[11:]
        source = '%016x' % source
        got_packet(source, None, rf_data)
    else:
        print 'unknown:', hex(cmdID), cmdData.encode('hex')
