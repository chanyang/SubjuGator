#!/usr/bin/env python

import math
import random

import roslib; roslib.load_manifest('sub_launch')
import rospy
import actionlib
from std_msgs.msg import Header
from geometry_msgs.msg import Pose, Quaternion, Point, Vector3, Twist
from nav_msgs.msg import Odometry
from tf import transformations

from uf_common.msg import PoseTwistStamped, MoveToAction, MoveToGoal, PoseTwist
from uf_common.orientation_helpers import xyz_array, xyzw_array

rospy.init_node('barrel_roll')

client = actionlib.SimpleActionClient('moveto', MoveToAction)
print 'Waiting for server...'
client.wait_for_server()

print 'Waiting for current position...'
orig = rospy.wait_for_message('/trajectory', PoseTwistStamped)

print 'Sending goal...'
client.send_goal(MoveToGoal(
    header=Header(
        frame_id=orig.header.frame_id,
    ),
    posetwist=PoseTwist(
        pose=orig.posetwist.pose,
        twist=Twist(
            linear=Vector3(0, 0, 0),
            angular=Vector3(1000 if random.randrange(2) else -1000, 0, 0),
        ),
    ),
))

print 'Waiting until rolled 90 degrees to send final pose...'
orig_up = transformations.quaternion_matrix(xyzw_array(orig.posetwist.pose.orientation))[:3, :3].dot([0, 0, 1])
while True:
    traj = rospy.wait_for_message('/trajectory', PoseTwistStamped)
    current_up = transformations.quaternion_matrix(xyzw_array(traj.posetwist.pose.orientation))[:3, :3].dot([0, 0, 1])
    if current_up.dot(orig_up) < 0:
        break

print 'Sending final pose...'
client.send_goal_and_wait(MoveToGoal(
    header=Header(
        frame_id=orig.header.frame_id,
    ),
    posetwist=PoseTwist(
        pose=orig.posetwist.pose,
    ),
))
