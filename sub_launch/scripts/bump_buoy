#!/usr/bin/env python

import argparse
import math

import numpy

import roslib; roslib.load_manifest('sub_launch')
import rospy
import actionlib
from std_msgs.msg import Header
from geometry_msgs.msg import Pose, Quaternion, Point
from nav_msgs.msg import Odometry
from tf import transformations

from uf_common import orientation_helpers
from uf_common.msg import MoveToAction, MoveToGoal, PoseTwist
from uf_common.orientation_helpers import xyz_array, xyzw_array
from object_finder.msg import FindAction, FindGoal


rospy.init_node('bump_buoy')


visionclient = actionlib.SimpleActionClient('find_forward', FindAction)
print 'Waiting for server...'
visionclient.wait_for_server()


client = actionlib.SimpleActionClient('moveto', MoveToAction)
print 'Waiting for server...'
client.wait_for_server()
print 'ok'

current = orientation_helpers.PoseEditor.from_Odometry_topic().depth(2)
#client.send_goal_and_wait(current)

went = False
ignore = False

def got_feedback(fb):
    if ignore: return
    print fb
    global current, went, ignore
    if fb.P_within_10cm > .9 or went:
        # approach mode
        buoy_pos = xyz_array(fb.pose.position)
        
        current = current.set_position(buoy_pos)
        client.send_goal(current)
        went = True
        
        odom = orientation_helpers.PoseEditor.from_Odometry_topic()
        if numpy.linalg.norm(odom.position - buoy_pos) < 1:
            # don't make corrections when near buoy
            ignore = True
            visionclient.cancel_goal()
            rospy.signal_shutdown('reached buoy')
    else:
        # search mode
        current = current.look_at_without_pitching(xyz_array(fb.pose.position))
        client.send_goal(current)

guess_pos = current.position + current.forward_vector * 4

goal = FindGoal()
goal.header.frame_id = current.header.frame_id
goal.type = goal.TYPE_SPHERE
goal.sphere_radius = 4*.0254 # 4 in
goal.prior_distribution.pose.position = Point(*guess_pos)
goal.prior_distribution.pose.orientation.w = 1
goal.prior_distribution.covariance[0+6*0] = 1
goal.prior_distribution.covariance[1+6*1] = 1
goal.prior_distribution.covariance[2+6*2] = 1
goal.min_dist = 2.6
goal.max_dist = 6
visionclient.send_goal(goal, feedback_cb=got_feedback)

rospy.spin()
