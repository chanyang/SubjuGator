#!/usr/bin/env python

import argparse
import math

import numpy

import roslib; roslib.load_manifest('sub_launch')
import rospy
import actionlib
from std_msgs.msg import Header
from geometry_msgs.msg import Pose, Quaternion, Point
from nav_msgs.msg import Odometry
import tf
from tf import transformations

from uf_common import orientation_helpers
from uf_common.msg import MoveToAction, MoveToGoal, PoseTwist
from uf_common.orientation_helpers import xyz_array, xyzw_array
from object_finder.msg import FindAction, FindGoal, TargetDesc


rospy.init_node('bump_buoy')

visionclient = actionlib.SimpleActionClient('find_forward', FindAction)
print 'Waiting for server...'
visionclient.wait_for_server()


client = actionlib.SimpleActionClient('moveto', MoveToAction)
print 'Waiting for server...'
client.wait_for_server()
print 'ok'

current = orientation_helpers.PoseEditor.from_PoseTwistStamped_topic('/trajectory').depth(2)
client.send_goal_and_wait(current)


tf_listener = tf.TransformListener()
print 'before'
tf_listener.waitForTransform('/base_link', '/forward_camera', rospy.Time(0), rospy.Duration(1000000))
bump_pos, _ = tf_listener.lookupTransform('/base_link', '/forward_camera', rospy.Time(0))
print 'after'
bump_pos = numpy.array(bump_pos)
print bump_pos

went = False
ignore = False


import itertools
rgb_array = lambda x: numpy.array([x.r, x.g, x.b])
normalized = lambda x: numpy.array(x)/numpy.linalg.norm(numpy.array(x))
def classify(colors):
    colordefs = dict(
        red=(1, 0, 0),
        green=(0, 1, 0),
        yellow=(1, 1, 0),
    )
    return min(itertools.permutations(colordefs), key=lambda perm:
        sum(numpy.linalg.norm(normalized(a)-normalized(b))**2
        for a, b in zip(map(colordefs.__getitem__, perm), map(rgb_array, colors)))
    )


def got_feedback(fb2):
    print 1
    fb = fb2.targetreses[0]
    #if ignore: return
    print fb2
    global current, went, ignore
    colors = classify(targetres.color for targetres in fb2.targetreses)
    buoys = sorted(zip(fb2.targetreses, colors), key=lambda (x, color): x.pose.position.x)
    print [(buoy[1], buoy[0].pose.position.x) for buoy in buoys]
    return
    if fb2.P_within_10cm > .9 or went:
        # approach mode
        buoy_pos = xyz_array(fb.pose.position)
        
        current = current.set_position(buoy_pos).relative(-bump_pos*.7)
        client.send_goal(current.as_MoveToGoal(speed=.25))
        went = True
        
        odom = orientation_helpers.PoseEditor.from_PoseTwistStamped_topic('/trajectory')
        if numpy.linalg.norm(odom.position - buoy_pos) < 1:
            # don't make corrections when near buoy
            ignore = True
            visionclient.cancel_goal()
            client.send_goal_and_wait(current)
            rospy.signal_shutdown('reached buoy')
    else:
        # search mode
        pass
        #current = current.look_at_without_pitching(xyz_array(fb.pose.position))
        #client.send_goal(current)

guess_pos = current.position + current.forward_vector * 4

target = TargetDesc()
target.type = TargetDesc.TYPE_SPHERE
target.sphere_radius = 4*.0254 # 4 in
target.prior_distribution.pose.position = Point(*guess_pos)
target.prior_distribution.pose.orientation.w = 1
target.prior_distribution.covariance[0+6*0] = 1
target.prior_distribution.covariance[1+6*1] = 1
target.prior_distribution.covariance[2+6*2] = 1
target.min_dist = 2.6
target.max_dist = 6

goal = FindGoal()
goal.header.frame_id = current.header.frame_id
goal.targetdescs = [target, target, target]
visionclient.send_goal(goal, feedback_cb=got_feedback)

#client.send_goal(current.forward(10).as_MoveToGoal(speed=.1))

rospy.spin()
