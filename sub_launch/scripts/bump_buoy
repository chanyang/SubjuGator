#!/usr/bin/env python

import argparse
import math

import roslib; roslib.load_manifest('sub_launch')
import rospy
import actionlib
from std_msgs.msg import Header
from geometry_msgs.msg import Pose, Quaternion, Point
from nav_msgs.msg import Odometry
from tf import transformations

from uf_common import orientation_helpers
from uf_common.orientation_helpers import xyz_array, xyzw_array

from c3_trajectory_generator.msg import MoveToAction, MoveToGoal
from object_finder.msg import FindSphereAction, FindSphereGoal

'''
parser = argparse.ArgumentParser()
parser.add_argument('x', metavar='X', type=float)
parser.add_argument('y', metavar='Y', type=float)
parser.add_argument('z', metavar='Z', type=float)
parser.add_argument('Y', metavar='YAW', type=float, nargs='?', default=0)
args = parser.parse_args()
'''

rospy.init_node('bump_buoy')


visionclient = actionlib.SimpleActionClient('findsphere', FindSphereAction)
print 'Waiting for server...'
visionclient.wait_for_server()


client = actionlib.SimpleActionClient('moveto', MoveToAction)
print 'Waiting for server...'
client.wait_for_server()

current = rospy.wait_for_message('/odom', Odometry)
pos = xyz_array(current.pose.pose.position)
orientation = xyzw_array(current.pose.pose.orientation)

def go(position, orientation):
    client.send_goal(MoveToGoal( #_and_wait
        header=Header(
            frame_id=current.header.frame_id,
        ),
        pose=Pose(
            position=Point(*position),
            orientation=Quaternion(*orientation),
        ),
    ))


go(pos, orientation)

went = False

def got_feedback(fb):
    global orientation, went, pos
    #if went: return
    print fb
    if fb.P_within_10cm > .3 or went:
        pos = xyz_array(fb.pose.position)
        go(pos, orientation)
        went = True
        return
    orientation = orientation_helpers.lookat(xyz_array(fb.pose.position) - pos)
    print xyz_array(fb.pose.position) - pos
    go(pos, orientation)

guess_pos = pos + transformations.quaternion_matrix(orientation)[:3, :3].dot([4, 0, 0])

goal = FindSphereGoal()
goal.header.frame_id = current.header.frame_id
goal.guess.pose.position = Point(*guess_pos)
goal.guess.covariance[0+6*0] = 1
goal.guess.covariance[1+6*1] = 1
goal.guess.covariance[2+6*2] = 1
visionclient.send_goal(goal, feedback_cb=got_feedback)

rospy.spin()
