#!/usr/bin/env python

from __future__ import division

import math

import numpy

import roslib
roslib.load_manifest('sub_launch')
import rospy
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64
from tf import transformations

from uf_common.orientation_helpers import xyz_array, xyzw_array
from uf_common.msg import PoseTwistStamped


rospy.init_node('odom_to_euler')

odom_roll_pub = rospy.Publisher('/odom_roll', Float64)
odom_pitch_pub = rospy.Publisher('/odom_pitch', Float64)
odom_yaw_pub = rospy.Publisher('/odom_yaw', Float64)
def odom_callback(msg):
    roll, pitch, yaw = transformations.euler_from_quaternion(xyzw_array(msg.pose.pose.orientation))
    odom_roll_pub.publish(math.degrees(roll))
    odom_pitch_pub.publish(math.degrees(pitch))
    odom_yaw_pub.publish(math.degrees(yaw))
rospy.Subscriber('odom', Odometry, odom_callback)

traj_roll_pub = rospy.Publisher('/traj_roll', Float64)
traj_pitch_pub = rospy.Publisher('/traj_pitch', Float64)
traj_yaw_pub = rospy.Publisher('/traj_yaw', Float64)
def traj_callback(msg):
    roll, pitch, yaw = transformations.euler_from_quaternion(xyzw_array(msg.posetwist.pose.orientation))
    traj_roll_pub.publish(math.degrees(roll))
    traj_pitch_pub.publish(math.degrees(pitch))
    traj_yaw_pub.publish(math.degrees(yaw))
rospy.Subscriber('trajectory', PoseTwistStamped, traj_callback)

rospy.spin()
