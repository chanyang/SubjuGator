#!/usr/bin/env python

from __future__ import division

import math
import struct

import numpy

import roslib
roslib.load_manifest('thruster_driver')
import rospy
from std_msgs.msg import Header
from geometry_msgs.msg import Point, Vector3, Vector3Stamped

from thruster_handling.broadcaster import ThrusterBroadcaster
from magnetic_dynamic_compensation.msg import FieldInfo
from kill_handling.listener import KillListener
from embedded_protocol import embedded

from thruster_driver.srv import DoMagneticCalibration, DoMagneticCalibrationResponse


rospy.init_node('thruster_driver', anonymous=True)

address = rospy.get_param('~address')
port = rospy.get_param('~port')
local_address = rospy.get_param('~local_address')
remote_address = rospy.get_param('~remote_address')
thruster_id = rospy.get_param('~thruster_id')
frame_id = rospy.get_param('~frame_id')
position = rospy.get_param('~position')
direction = rospy.get_param('~direction')
rev_force = rospy.get_param('~rev_force')
fwd_force = rospy.get_param('~fwd_force')

mag_frame_id = rospy.get_param('~mag_frame_id', None)
mag_coeffs = rospy.get_param('~mag_coeffs', None)

kill_listener = KillListener(killed_callback=lambda: thrustercommand_callback(0))


# forward commands to thruster
conn = embedded.Embedded(address, port, local_address, remote_address)
def thrustercommand_callback(force):
    if kill_listener.get_killed() and force != 0:
        return
    scaled = force / fwd_force if force >= 0 else force / rev_force
    clamped = -1 if scaled < -1 else 1 if scaled > 1 else scaled
    x = int(math.floor(clamped * 100 * 2**8 + .5))
    conn.send(struct.pack('<BBH', 0, 3, 0x8000|x if x >= 0 else -x))

info_period = rospy.Duration(1)
thruster_broadcaster = ThrusterBroadcaster(
    frame_id=frame_id,
    id=thruster_id,
    lifetime=info_period * 2,
    position=position,
    direction=direction,
    min_force=-rev_force,
    max_force=+fwd_force,
    torque_per_force=[0, 0, 0],
    command_callback=thrustercommand_callback,
)
rospy.Timer(info_period, lambda timerevent: thruster_broadcaster.send())


def heartbeat():
    conn.send('')
    conn.send(struct.pack('<BBB', 0, 1, 50)) # StartPublishing(50hz)
rospy.Timer(rospy.Duration(.1), lambda _: heartbeat())

def do_magnetic_calibration(req):
    _mag_holder = [None]
    def _got_mag(msg):
        _mag_holder[:] = [numpy.array([msg.vector.x, msg.vector.y, msg.vector.z]), msg.header.frame_id]
    mag_sub = rospy.Subscriber('/imu/mag_raw', Vector3Stamped, _got_mag)
    def wait_for_mag():
        _mag_holder[0] = None
        while _mag_holder[0] is None:
            rospy.sleep(.01)
        return _mag_holder[0], _mag_holder[1]
    
    N = 21
    
    currents = []
    mags = []
    for dir, i in [('fwd', _) for _ in range(N)] + [('rev', _) for _ in reversed(range(N))]:
        force = -rev_force + (fwd_force - -rev_force)*i/(N-1)
        thrustercommand_callback(force)
        rospy.sleep(.5)
        
        currents.append(wait_for_current())
        mags.append(wait_for_mag()[0])
        
        print dir, i, force, currents[-1], mags[-1]
    thrustercommand_callback(0)
    
    currents = numpy.array(currents)
    mags = numpy.array(mags)
    
    #from matplotlib import pyplot
    #pyplot.plot(currents, mags[:,0])
    #pyplot.show()
    
    global mag_frame_id
    mag_frame_id = wait_for_mag()[1]
    rospy.set_param('~mag_frame_id', mag_frame_id)
    
    ORDER = 3
    posfit = numpy.polyfit(*zip(*[pair for pair in zip(currents, mags) if pair[0] > 0]) + [ORDER])
    negfit = numpy.polyfit(*zip(*[pair for pair in zip(currents, mags) if pair[0] < 0]) + [ORDER])
    posfit[-1] = 0
    negfit[-1] = 0
    
    global mag_coeffs
    mag_coeffs = [[map(float, row) for row in negfit], [map(float, row) for row in posfit]]
    rospy.set_param('~mag_coeffs', mag_coeffs)
    
    mag_sub.unregister()
    
    return DoMagneticCalibrationResponse()
rospy.Service('~do_magnetic_calibration', DoMagneticCalibration, do_magnetic_calibration)

_current_holder = [None]
def wait_for_current():
    _current_holder[0] = None
    while _current_holder[0] is None:
        rospy.sleep(.01)
    return _current_holder[0]


mag_pub = rospy.Publisher('/imu/mag_generated_info', FieldInfo)
while not rospy.is_shutdown():
    data = conn.recv()
    now = rospy.Time.now()
    if len(data) != 13:
        print 'wrong length', len(data)
        continue
    typecode, tickcount, flags, refinput_, presentoutput_, railvoltage_, current_ = struct.unpack('<BHHHHHH', data)
    if typecode != 0:
        print 'wrong typecode', typecode
        continue
    refinput = (refinput_ & ~0x8000) / 2**8 * (-1 if refinput_ & 0x8000 else 1)
    presentoutput, railvoltage, current = presentoutput_ / 2**10, railvoltage_ / 2**10, current_ / 2**12
    
    signed_current = current * (1 if refinput >= 0 else -1)
    
    _current_holder[0] = signed_current
    
    if mag_frame_id is not None and mag_coeffs is not None:
        magnetic_field = numpy.zeros(3) if signed_current == 0 else \
            numpy.polyval(mag_coeffs[0], signed_current) if signed_current < 0 else \
            numpy.polyval(mag_coeffs[1], signed_current)
        
        mag_pub.publish(FieldInfo(
            header=Header(
                stamp=now,
                frame_id=mag_frame_id,
            ),
            id=rospy.get_name(),
            lifetime=rospy.Duration(1), # XXX
            magnetic_field=Vector3(*magnetic_field),
        ))
